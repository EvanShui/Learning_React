let & const
- let: variable values
- const: constants

Arrow Functions
before:
function myFunc() {

}

now:
cons myFnc = () => {

}

;; these two functions are equal to one another
function printMyName(name) {
  console.log(name);
}
const printMyName = (name) => {
  console.log(name);
}
;; this syntax is only valid for single argument functions
const printMyName = name => {
  console.log(name);
}
;; CAN NOT DO THIS -- will throw error
const printMyName = name, age => {
  console.log(name);
}

;; if you have a single line of code in the function, you can write it like so

const multiply = number => {
  return number * 2;
}

const multiply = number => return number * 2;

Exports & Imports (Modules)-------

Access code from different js files
two ways to export:
- export default {var}: whenever file is imported, this {var} is the only
  entity that is exported out of the file.
- export {var}: whenever file is imported, this {var} has to be declared in the 
  corresponding import statement

person.js
---------
const person = {
  name: 'Max'
}

export default person

utility.js
----------
export const clean = () => {...}
export const baseData = 10;

app.js
------
import person from './person.js' ---|- these two statements import the same thing
import prs from './person.js' ------|

;; these two import statements import two different entities from './utility.js'
import {baseData} from './utility.js'

;; you can also use 'as' to alias the var into a different name 
import {clean as cln} from './utility.js'

Classes ---------

class Human {
  constructor() {
    this.gender = 'male';
  }

  printGender() {
    console.log(this.gender);
  }
}

class Person extends Human{
  constructor() {
    super();
    this.gender = 'Female';
    this.name = 'Max';
  }
  call = () => {...}
  printMyName() {
    console.log(this.name);
  }
}

const person = new Person();
person.printMyName();
;; still a valid call (calling from parent object (Person))
person.printGender(); // prints out 'Female'

Classes (updated to new syntax) ---------

class Human {
  gender = 'male';
  const printGender = () => {
    consolel.og(this.gender);
  }  
}

class Person extends Human{
  gender = 'Female';
  name = 'Max';
  printMyName = () => {
    console.log(this.name);
  }
}

const person = new Person();
person.printMyName();
;; still a valid call (calling from parent object (Person))
person.printGender(); // prints out 'Female'

Spread & Rest Operators --------

Spread: Used to split up array elements OR object properties
const newArray = [...oldArray, 1, 2] adds all the elements from oldArray to the
beginning of new array and appends 1 and 2 to the end
const newObject = { ...olDobject, newProp: 5} takes all properties from
oldObject and adds newProp property to oldObject.

rest: Used to merge a list of function arguments into an array
function sortArgs(... args) {
  return args.sort()
}

const numbers = [1, 2, 3];
const newNumbers = [...numbers, 4, 5] // == [1,2,3,4,5]

const person = {
  name: 'Max'
}

const newPerson = {
  ...person,
  age: 28
}

console.log(newPerson) // == [obejct Object] {age: 28 \n name: 'Max'}

const filter = (...args) => {
  return args.filter(el => el === 1)
}
//args.filter will return elements that satisfy the condition (el === 1)
console.log(filter(1, 2, 3));

Destructuring ----------
Easily extract array elements or object properties and store them in variables
Array destructuring
[a, b] = ['Hello', 'Max']
console.log(a) // 'Hello' etc.

Object destrcuturing
{name} = {name: 'Max', age: 28}
console.log(name) // 'Max'

const numbers = [1,2,3]
[num1, , num3] = numbers;
console.log(num1, num3) // 1 3

Reference and Primitive Types Refresher
const number = 1;
const num2 = number;

console.log(num2); // 1

primitive variables get copied if reassigned

const person = {
  name : 'Max'
}

const secondPerson = {
  ...person
}

const secondPerson = person
person.name='Manu';
console.log(secondPerson); // [object Object] {name: 'Manu'}

objects also get copied and making one change will propagate that change to the
original object. Avoid via spreading.

Array Functions --------------
const numbers = [1,2,3];
;; executes the function on each element
const doubleNumArray = numbers.map((num) => {
  return num * 2;
})
console.log(numbers) //[1,2,3]
console.log(doulbeNumArray) // [2,4,6]
